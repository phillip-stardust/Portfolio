
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b6c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d30  08000d38  00010d38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d30  08000d30  00010d38  2**0
                  CONTENTS
  4 .ARM          00000000  08000d30  08000d30  00010d38  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d30  08000d38  00010d38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d30  08000d30  00010d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d34  08000d34  00010d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010d38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000d38  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000d38  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010d38  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001359  00000000  00000000  00010d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004f0  00000000  00000000  000120c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000158  00000000  00000000  000125b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000120  00000000  00000000  00012710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000207a  00000000  00000000  00012830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001766  00000000  00000000  000148aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008e59  00000000  00000000  00016010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001ee69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004c4  00000000  00000000  0001eebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000d18 	.word	0x08000d18

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000d18 	.word	0x08000d18

08000204 <SPI2_GPIOInits>:
//Arduino led

#define	LED_PIN						9


void SPI2_GPIOInits(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOxr = GPIOB;
 800020a:	4b14      	ldr	r3, [pc, #80]	; (800025c <SPI2_GPIOInits+0x58>)
 800020c:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800020e:	2302      	movs	r3, #2
 8000210:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000212:	2305      	movs	r3, #5
 8000214:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000216:	2300      	movs	r3, #0
 8000218:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800021a:	2300      	movs	r3, #0
 800021c:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800021e:	2302      	movs	r3, #2
 8000220:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000222:	230d      	movs	r3, #13
 8000224:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f000 fa1d 	bl	8000668 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 800022e:	230f      	movs	r3, #15
 8000230:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4618      	mov	r0, r3
 8000236:	f000 fa17 	bl	8000668 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 800023a:	230e      	movs	r3, #14
 800023c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4618      	mov	r0, r3
 8000242:	f000 fa11 	bl	8000668 <GPIO_Init>

	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000246:	230c      	movs	r3, #12
 8000248:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	4618      	mov	r0, r3
 800024e:	f000 fa0b 	bl	8000668 <GPIO_Init>
}
 8000252:	bf00      	nop
 8000254:	3710      	adds	r7, #16
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	40020400 	.word	0x40020400

08000260 <delay>:

void delay(void)
{
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 8000266:	2300      	movs	r3, #0
 8000268:	607b      	str	r3, [r7, #4]
 800026a:	e002      	b.n	8000272 <delay+0x12>
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	3301      	adds	r3, #1
 8000270:	607b      	str	r3, [r7, #4]
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	4a04      	ldr	r2, [pc, #16]	; (8000288 <delay+0x28>)
 8000276:	4293      	cmp	r3, r2
 8000278:	d9f8      	bls.n	800026c <delay+0xc>
}
 800027a:	bf00      	nop
 800027c:	bf00      	nop
 800027e:	370c      	adds	r7, #12
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr
 8000288:	0003d08f 	.word	0x0003d08f

0800028c <SPI_verifyResponse>:

uint8_t SPI_verifyResponse(uint8_t ackbyte){
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	71fb      	strb	r3, [r7, #7]
	if(ackbyte == 0xF5){
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	2bf5      	cmp	r3, #245	; 0xf5
 800029a:	d101      	bne.n	80002a0 <SPI_verifyResponse+0x14>
		//ack
		return 1;
 800029c:	2301      	movs	r3, #1
 800029e:	e000      	b.n	80002a2 <SPI_verifyResponse+0x16>
	}
	return 0;
 80002a0:	2300      	movs	r3, #0
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
	...

080002b0 <SPI2_Inits>:

void SPI2_Inits(void){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2Handle;
	SPI2Handle.pSPIx = SPI2;
 80002b6:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <SPI2_Inits+0x38>)
 80002b8:	607b      	str	r3, [r7, #4]
	SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 80002ba:	2301      	movs	r3, #1
 80002bc:	727b      	strb	r3, [r7, #9]
	SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80002be:	2301      	movs	r3, #1
 80002c0:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;  //GENERATE SCLK OF 2 MHZ
 80002c2:	2302      	movs	r3, #2
 80002c4:	72bb      	strb	r3, [r7, #10]
	SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 80002c6:	2300      	movs	r3, #0
 80002c8:	72fb      	strb	r3, [r7, #11]
	SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 80002ca:	2300      	movs	r3, #0
 80002cc:	733b      	strb	r3, [r7, #12]
	SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 80002ce:	2300      	movs	r3, #0
 80002d0:	737b      	strb	r3, [r7, #13]
	SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_DIS; //Hardware management enabled for NSS pin
 80002d2:	2300      	movs	r3, #0
 80002d4:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2Handle);
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 fbf3 	bl	8000ac4 <SPI_Init>
}
 80002de:	bf00      	nop
 80002e0:	3710      	adds	r7, #16
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40003800 	.word	0x40003800

080002ec <GPIO_ButtonInit>:

void GPIO_ButtonInit(void){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0
	//this is btn gpio configuration
	GPIO_Handle_t GPIOBtn;
	GPIOBtn.pGPIOxr = GPIOA;
 80002f2:	4b09      	ldr	r3, [pc, #36]	; (8000318 <GPIO_ButtonInit+0x2c>)
 80002f4:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 80002f6:	2300      	movs	r3, #0
 80002f8:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INPUT;
 80002fa:	2300      	movs	r3, #0
 80002fc:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002fe:	2302      	movs	r3, #2
 8000300:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000302:	2300      	movs	r3, #0
 8000304:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	4618      	mov	r0, r3
 800030a:	f000 f9ad 	bl	8000668 <GPIO_Init>
}
 800030e:	bf00      	nop
 8000310:	3710      	adds	r7, #16
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	40020000 	.word	0x40020000

0800031c <main>:

int main (void){
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0
	uint8_t dummy_write = 0xF5;
 8000322:	23f5      	movs	r3, #245	; 0xf5
 8000324:	73fb      	strb	r3, [r7, #15]
	uint8_t dummy_read;

	GPIO_ButtonInit();
 8000326:	f7ff ffe1 	bl	80002ec <GPIO_ButtonInit>
	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 800032a:	f7ff ff6b 	bl	8000204 <SPI2_GPIOInits>
	//this function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 800032e:	f7ff ffbf 	bl	80002b0 <SPI2_Inits>
	 * Making SSOE 1 does NSS output enable
	 * The NSS pis is automatically managed by the hardware
	 * i.e when SPE = 1, NSS will be pulled to low
	 * and NSS pin will be high when SPE = 0
	 */
	SPI_SSOEConfig(SPI2, ENABLE);
 8000332:	2101      	movs	r1, #1
 8000334:	484d      	ldr	r0, [pc, #308]	; (800046c <main+0x150>)
 8000336:	f000 fcae 	bl	8000c96 <SPI_SSOEConfig>
	while(1){
		//wait till button is pressed
		while(! GPIO_ReadFromInPin(GPIOA, GPIO_PIN_NO_0) );
 800033a:	bf00      	nop
 800033c:	2100      	movs	r1, #0
 800033e:	484c      	ldr	r0, [pc, #304]	; (8000470 <main+0x154>)
 8000340:	f000 fb26 	bl	8000990 <GPIO_ReadFromInPin>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d0f8      	beq.n	800033c <main+0x20>
		delay();
 800034a:	f7ff ff89 	bl	8000260 <delay>

		//enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2, ENABLE);
 800034e:	2101      	movs	r1, #1
 8000350:	4846      	ldr	r0, [pc, #280]	; (800046c <main+0x150>)
 8000352:	f000 fc84 	bl	8000c5e <SPI_PeripheralControl>

		//1. CMD_LED_CTRL <pin no(1)>	<value(1)>
		uint8_t commandcode = COMMAND_LED_CTRL;
 8000356:	2350      	movs	r3, #80	; 0x50
 8000358:	737b      	strb	r3, [r7, #13]
		uint8_t ackbyte;
		uint8_t args[2];
		//send command
		SPI_SendData(SPI2, &commandcode, 1);
 800035a:	f107 030d 	add.w	r3, r7, #13
 800035e:	2201      	movs	r2, #1
 8000360:	4619      	mov	r1, r3
 8000362:	4842      	ldr	r0, [pc, #264]	; (800046c <main+0x150>)
 8000364:	f000 fc0d 	bl	8000b82 <SPI_SendData>
		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000368:	f107 030e 	add.w	r3, r7, #14
 800036c:	2201      	movs	r2, #1
 800036e:	4619      	mov	r1, r3
 8000370:	483e      	ldr	r0, [pc, #248]	; (800046c <main+0x150>)
 8000372:	f000 fc3d 	bl	8000bf0 <SPI_ReceiveData>
		//send some dummy bits (1byte) to fetch the response from the slave
		SPI_SendData(SPI2, &dummy_write, 1);
 8000376:	f107 030f 	add.w	r3, r7, #15
 800037a:	2201      	movs	r2, #1
 800037c:	4619      	mov	r1, r3
 800037e:	483b      	ldr	r0, [pc, #236]	; (800046c <main+0x150>)
 8000380:	f000 fbff 	bl	8000b82 <SPI_SendData>
		//read the ack received by the data
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 8000384:	f107 030c 	add.w	r3, r7, #12
 8000388:	2201      	movs	r2, #1
 800038a:	4619      	mov	r1, r3
 800038c:	4837      	ldr	r0, [pc, #220]	; (800046c <main+0x150>)
 800038e:	f000 fc2f 	bl	8000bf0 <SPI_ReceiveData>
		if (SPI_verifyResponse(ackbyte)){
 8000392:	7b3b      	ldrb	r3, [r7, #12]
 8000394:	4618      	mov	r0, r3
 8000396:	f7ff ff79 	bl	800028c <SPI_verifyResponse>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d00a      	beq.n	80003b6 <main+0x9a>
			//send arguments
			args[0] = LED_PIN;
 80003a0:	2309      	movs	r3, #9
 80003a2:	723b      	strb	r3, [r7, #8]
			args[1] = LED_ON;
 80003a4:	2301      	movs	r3, #1
 80003a6:	727b      	strb	r3, [r7, #9]
			SPI_SendData(SPI2, args, 2);
 80003a8:	f107 0308 	add.w	r3, r7, #8
 80003ac:	2202      	movs	r2, #2
 80003ae:	4619      	mov	r1, r3
 80003b0:	482e      	ldr	r0, [pc, #184]	; (800046c <main+0x150>)
 80003b2:	f000 fbe6 	bl	8000b82 <SPI_SendData>
		}
		//END OF COMMAND CMD_LED_CTRL

		//2 CMD_SENSOR_READ <analog pin number (1)>
		while(! GPIO_ReadFromInPin(GPIOA, GPIO_PIN_NO_0) );
 80003b6:	bf00      	nop
 80003b8:	2100      	movs	r1, #0
 80003ba:	482d      	ldr	r0, [pc, #180]	; (8000470 <main+0x154>)
 80003bc:	f000 fae8 	bl	8000990 <GPIO_ReadFromInPin>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d0f8      	beq.n	80003b8 <main+0x9c>
		delay();
 80003c6:	f7ff ff4b 	bl	8000260 <delay>
		commandcode = COMMAND_SENSOR_READ;
 80003ca:	2351      	movs	r3, #81	; 0x51
 80003cc:	737b      	strb	r3, [r7, #13]
		//send command
		SPI_SendData(SPI2, &commandcode, 1);
 80003ce:	f107 030d 	add.w	r3, r7, #13
 80003d2:	2201      	movs	r2, #1
 80003d4:	4619      	mov	r1, r3
 80003d6:	4825      	ldr	r0, [pc, #148]	; (800046c <main+0x150>)
 80003d8:	f000 fbd3 	bl	8000b82 <SPI_SendData>
		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 80003dc:	f107 030e 	add.w	r3, r7, #14
 80003e0:	2201      	movs	r2, #1
 80003e2:	4619      	mov	r1, r3
 80003e4:	4821      	ldr	r0, [pc, #132]	; (800046c <main+0x150>)
 80003e6:	f000 fc03 	bl	8000bf0 <SPI_ReceiveData>
		//send some dummy bits (1byte) to fetch the response from the slave
		SPI_SendData(SPI2, &dummy_write, 1);
 80003ea:	f107 030f 	add.w	r3, r7, #15
 80003ee:	2201      	movs	r2, #1
 80003f0:	4619      	mov	r1, r3
 80003f2:	481e      	ldr	r0, [pc, #120]	; (800046c <main+0x150>)
 80003f4:	f000 fbc5 	bl	8000b82 <SPI_SendData>
		//read the ack received by the data
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 80003f8:	f107 030c 	add.w	r3, r7, #12
 80003fc:	2201      	movs	r2, #1
 80003fe:	4619      	mov	r1, r3
 8000400:	481a      	ldr	r0, [pc, #104]	; (800046c <main+0x150>)
 8000402:	f000 fbf5 	bl	8000bf0 <SPI_ReceiveData>
		if (SPI_verifyResponse(ackbyte)){
 8000406:	7b3b      	ldrb	r3, [r7, #12]
 8000408:	4618      	mov	r0, r3
 800040a:	f7ff ff3f 	bl	800028c <SPI_verifyResponse>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d008      	beq.n	8000426 <main+0x10a>
			args[0] = ANALOG_PIN0;
 8000414:	2300      	movs	r3, #0
 8000416:	723b      	strb	r3, [r7, #8]
			//send arguments
			SPI_SendData(SPI2, args, 2);
 8000418:	f107 0308 	add.w	r3, r7, #8
 800041c:	2202      	movs	r2, #2
 800041e:	4619      	mov	r1, r3
 8000420:	4812      	ldr	r0, [pc, #72]	; (800046c <main+0x150>)
 8000422:	f000 fbae 	bl	8000b82 <SPI_SendData>
		}
		//send dummy bits to clear off the RXNE
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000426:	f107 030e 	add.w	r3, r7, #14
 800042a:	2201      	movs	r2, #1
 800042c:	4619      	mov	r1, r3
 800042e:	480f      	ldr	r0, [pc, #60]	; (800046c <main+0x150>)
 8000430:	f000 fbde 	bl	8000bf0 <SPI_ReceiveData>

		//insert some delay so that slave can ready the data
		delay();
 8000434:	f7ff ff14 	bl	8000260 <delay>

		SPI_SendData(SPI2, &dummy_write, 1);
 8000438:	f107 030f 	add.w	r3, r7, #15
 800043c:	2201      	movs	r2, #1
 800043e:	4619      	mov	r1, r3
 8000440:	480a      	ldr	r0, [pc, #40]	; (800046c <main+0x150>)
 8000442:	f000 fb9e 	bl	8000b82 <SPI_SendData>

		uint8_t analog_read;
		SPI_ReceiveData(SPI2, &analog_read, 1);
 8000446:	1dfb      	adds	r3, r7, #7
 8000448:	2201      	movs	r2, #1
 800044a:	4619      	mov	r1, r3
 800044c:	4807      	ldr	r0, [pc, #28]	; (800046c <main+0x150>)
 800044e:	f000 fbcf 	bl	8000bf0 <SPI_ReceiveData>
		//end of CMD_SENSOR_READ

		//check if SPI is not busy
		while(SPI_getFlagStatus(SPI2, SPI_BUSY_FLAG));
 8000452:	bf00      	nop
 8000454:	2180      	movs	r1, #128	; 0x80
 8000456:	4805      	ldr	r0, [pc, #20]	; (800046c <main+0x150>)
 8000458:	f000 fb20 	bl	8000a9c <SPI_getFlagStatus>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d1f8      	bne.n	8000454 <main+0x138>
		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,DISABLE);
 8000462:	2100      	movs	r1, #0
 8000464:	4801      	ldr	r0, [pc, #4]	; (800046c <main+0x150>)
 8000466:	f000 fbfa 	bl	8000c5e <SPI_PeripheralControl>
	while(1){
 800046a:	e766      	b.n	800033a <main+0x1e>
 800046c:	40003800 	.word	0x40003800
 8000470:	40020000 	.word	0x40020000

08000474 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000474:	480d      	ldr	r0, [pc, #52]	; (80004ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000476:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000478:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800047c:	480c      	ldr	r0, [pc, #48]	; (80004b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800047e:	490d      	ldr	r1, [pc, #52]	; (80004b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000480:	4a0d      	ldr	r2, [pc, #52]	; (80004b8 <LoopForever+0xe>)
  movs r3, #0
 8000482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000484:	e002      	b.n	800048c <LoopCopyDataInit>

08000486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800048a:	3304      	adds	r3, #4

0800048c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800048c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800048e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000490:	d3f9      	bcc.n	8000486 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000492:	4a0a      	ldr	r2, [pc, #40]	; (80004bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000494:	4c0a      	ldr	r4, [pc, #40]	; (80004c0 <LoopForever+0x16>)
  movs r3, #0
 8000496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000498:	e001      	b.n	800049e <LoopFillZerobss>

0800049a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800049a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800049c:	3204      	adds	r2, #4

0800049e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800049e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004a0:	d3fb      	bcc.n	800049a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004a2:	f000 fc15 	bl	8000cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004a6:	f7ff ff39 	bl	800031c <main>

080004aa <LoopForever>:

LoopForever:
    b LoopForever
 80004aa:	e7fe      	b.n	80004aa <LoopForever>
  ldr   r0, =_estack
 80004ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004b4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004b8:	08000d38 	.word	0x08000d38
  ldr r2, =_sbss
 80004bc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004c0:	2000001c 	.word	0x2000001c

080004c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004c4:	e7fe      	b.n	80004c4 <ADC_IRQHandler>
	...

080004c8 <GPIO_PeriClkCtrl>:
 *
 * @return					- none
 *
 * @Note                    - none
 */
void GPIO_PeriClkCtrl(GPIO_RegDef_t *pGPIOxr, uint8_t EnorDi){
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80004d4:	78fb      	ldrb	r3, [r7, #3]
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d157      	bne.n	800058a <GPIO_PeriClkCtrl+0xc2>
		if(pGPIOxr == GPIOA){
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4a59      	ldr	r2, [pc, #356]	; (8000644 <GPIO_PeriClkCtrl+0x17c>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d106      	bne.n	80004f0 <GPIO_PeriClkCtrl+0x28>
			GPIOA_PCLK_EN();
 80004e2:	4b59      	ldr	r3, [pc, #356]	; (8000648 <GPIO_PeriClkCtrl+0x180>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e6:	4a58      	ldr	r2, [pc, #352]	; (8000648 <GPIO_PeriClkCtrl+0x180>)
 80004e8:	f043 0301 	orr.w	r3, r3, #1
 80004ec:	6313      	str	r3, [r2, #48]	; 0x30
		}
		else if(pGPIOxr == GPIOH){
			GPIOH_PCLK_DIS();
		}
	}
}
 80004ee:	e0a3      	b.n	8000638 <GPIO_PeriClkCtrl+0x170>
		else if(pGPIOxr == GPIOB){
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4a56      	ldr	r2, [pc, #344]	; (800064c <GPIO_PeriClkCtrl+0x184>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d106      	bne.n	8000506 <GPIO_PeriClkCtrl+0x3e>
			GPIOB_PCLK_EN();
 80004f8:	4b53      	ldr	r3, [pc, #332]	; (8000648 <GPIO_PeriClkCtrl+0x180>)
 80004fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fc:	4a52      	ldr	r2, [pc, #328]	; (8000648 <GPIO_PeriClkCtrl+0x180>)
 80004fe:	f043 0302 	orr.w	r3, r3, #2
 8000502:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000504:	e098      	b.n	8000638 <GPIO_PeriClkCtrl+0x170>
		else if(pGPIOxr == GPIOC){
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4a51      	ldr	r2, [pc, #324]	; (8000650 <GPIO_PeriClkCtrl+0x188>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d106      	bne.n	800051c <GPIO_PeriClkCtrl+0x54>
			GPIOC_PCLK_EN();
 800050e:	4b4e      	ldr	r3, [pc, #312]	; (8000648 <GPIO_PeriClkCtrl+0x180>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	4a4d      	ldr	r2, [pc, #308]	; (8000648 <GPIO_PeriClkCtrl+0x180>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6313      	str	r3, [r2, #48]	; 0x30
}
 800051a:	e08d      	b.n	8000638 <GPIO_PeriClkCtrl+0x170>
		else if(pGPIOxr == GPIOD){
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	4a4d      	ldr	r2, [pc, #308]	; (8000654 <GPIO_PeriClkCtrl+0x18c>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d106      	bne.n	8000532 <GPIO_PeriClkCtrl+0x6a>
			GPIOD_PCLK_EN();
 8000524:	4b48      	ldr	r3, [pc, #288]	; (8000648 <GPIO_PeriClkCtrl+0x180>)
 8000526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000528:	4a47      	ldr	r2, [pc, #284]	; (8000648 <GPIO_PeriClkCtrl+0x180>)
 800052a:	f043 0308 	orr.w	r3, r3, #8
 800052e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000530:	e082      	b.n	8000638 <GPIO_PeriClkCtrl+0x170>
		else if(pGPIOxr == GPIOE){
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4a48      	ldr	r2, [pc, #288]	; (8000658 <GPIO_PeriClkCtrl+0x190>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d106      	bne.n	8000548 <GPIO_PeriClkCtrl+0x80>
			GPIOE_PCLK_EN();
 800053a:	4b43      	ldr	r3, [pc, #268]	; (8000648 <GPIO_PeriClkCtrl+0x180>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a42      	ldr	r2, [pc, #264]	; (8000648 <GPIO_PeriClkCtrl+0x180>)
 8000540:	f043 0310 	orr.w	r3, r3, #16
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000546:	e077      	b.n	8000638 <GPIO_PeriClkCtrl+0x170>
		else if(pGPIOxr == GPIOF){
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4a44      	ldr	r2, [pc, #272]	; (800065c <GPIO_PeriClkCtrl+0x194>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d106      	bne.n	800055e <GPIO_PeriClkCtrl+0x96>
			GPIOF_PCLK_EN();
 8000550:	4b3d      	ldr	r3, [pc, #244]	; (8000648 <GPIO_PeriClkCtrl+0x180>)
 8000552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000554:	4a3c      	ldr	r2, [pc, #240]	; (8000648 <GPIO_PeriClkCtrl+0x180>)
 8000556:	f043 0320 	orr.w	r3, r3, #32
 800055a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800055c:	e06c      	b.n	8000638 <GPIO_PeriClkCtrl+0x170>
		else if(pGPIOxr == GPIOG){
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4a3f      	ldr	r2, [pc, #252]	; (8000660 <GPIO_PeriClkCtrl+0x198>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d106      	bne.n	8000574 <GPIO_PeriClkCtrl+0xac>
			GPIOG_PCLK_EN();
 8000566:	4b38      	ldr	r3, [pc, #224]	; (8000648 <GPIO_PeriClkCtrl+0x180>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	4a37      	ldr	r2, [pc, #220]	; (8000648 <GPIO_PeriClkCtrl+0x180>)
 800056c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000570:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000572:	e061      	b.n	8000638 <GPIO_PeriClkCtrl+0x170>
		else if(pGPIOxr == GPIOH){
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4a3b      	ldr	r2, [pc, #236]	; (8000664 <GPIO_PeriClkCtrl+0x19c>)
 8000578:	4293      	cmp	r3, r2
 800057a:	d15d      	bne.n	8000638 <GPIO_PeriClkCtrl+0x170>
			GPIOH_PCLK_EN();
 800057c:	4b32      	ldr	r3, [pc, #200]	; (8000648 <GPIO_PeriClkCtrl+0x180>)
 800057e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000580:	4a31      	ldr	r2, [pc, #196]	; (8000648 <GPIO_PeriClkCtrl+0x180>)
 8000582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000586:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000588:	e056      	b.n	8000638 <GPIO_PeriClkCtrl+0x170>
		if(pGPIOxr == GPIOA){
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4a2d      	ldr	r2, [pc, #180]	; (8000644 <GPIO_PeriClkCtrl+0x17c>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d106      	bne.n	80005a0 <GPIO_PeriClkCtrl+0xd8>
			GPIOA_PCLK_DIS();
 8000592:	4b2d      	ldr	r3, [pc, #180]	; (8000648 <GPIO_PeriClkCtrl+0x180>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a2c      	ldr	r2, [pc, #176]	; (8000648 <GPIO_PeriClkCtrl+0x180>)
 8000598:	f023 0301 	bic.w	r3, r3, #1
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800059e:	e04b      	b.n	8000638 <GPIO_PeriClkCtrl+0x170>
		else if(pGPIOxr == GPIOB){
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4a2a      	ldr	r2, [pc, #168]	; (800064c <GPIO_PeriClkCtrl+0x184>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d106      	bne.n	80005b6 <GPIO_PeriClkCtrl+0xee>
			GPIOB_PCLK_DIS();
 80005a8:	4b27      	ldr	r3, [pc, #156]	; (8000648 <GPIO_PeriClkCtrl+0x180>)
 80005aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ac:	4a26      	ldr	r2, [pc, #152]	; (8000648 <GPIO_PeriClkCtrl+0x180>)
 80005ae:	f023 0302 	bic.w	r3, r3, #2
 80005b2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005b4:	e040      	b.n	8000638 <GPIO_PeriClkCtrl+0x170>
		else if(pGPIOxr == GPIOC){
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4a25      	ldr	r2, [pc, #148]	; (8000650 <GPIO_PeriClkCtrl+0x188>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d106      	bne.n	80005cc <GPIO_PeriClkCtrl+0x104>
			GPIOC_PCLK_DIS();
 80005be:	4b22      	ldr	r3, [pc, #136]	; (8000648 <GPIO_PeriClkCtrl+0x180>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a21      	ldr	r2, [pc, #132]	; (8000648 <GPIO_PeriClkCtrl+0x180>)
 80005c4:	f023 0304 	bic.w	r3, r3, #4
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005ca:	e035      	b.n	8000638 <GPIO_PeriClkCtrl+0x170>
		else if(pGPIOxr == GPIOD){
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	4a21      	ldr	r2, [pc, #132]	; (8000654 <GPIO_PeriClkCtrl+0x18c>)
 80005d0:	4293      	cmp	r3, r2
 80005d2:	d106      	bne.n	80005e2 <GPIO_PeriClkCtrl+0x11a>
			GPIOD_PCLK_DIS();
 80005d4:	4b1c      	ldr	r3, [pc, #112]	; (8000648 <GPIO_PeriClkCtrl+0x180>)
 80005d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d8:	4a1b      	ldr	r2, [pc, #108]	; (8000648 <GPIO_PeriClkCtrl+0x180>)
 80005da:	f023 0308 	bic.w	r3, r3, #8
 80005de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005e0:	e02a      	b.n	8000638 <GPIO_PeriClkCtrl+0x170>
		else if(pGPIOxr == GPIOE){
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4a1c      	ldr	r2, [pc, #112]	; (8000658 <GPIO_PeriClkCtrl+0x190>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d106      	bne.n	80005f8 <GPIO_PeriClkCtrl+0x130>
			GPIOE_PCLK_DIS();
 80005ea:	4b17      	ldr	r3, [pc, #92]	; (8000648 <GPIO_PeriClkCtrl+0x180>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a16      	ldr	r2, [pc, #88]	; (8000648 <GPIO_PeriClkCtrl+0x180>)
 80005f0:	f023 0310 	bic.w	r3, r3, #16
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005f6:	e01f      	b.n	8000638 <GPIO_PeriClkCtrl+0x170>
		else if(pGPIOxr == GPIOF){
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4a18      	ldr	r2, [pc, #96]	; (800065c <GPIO_PeriClkCtrl+0x194>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d106      	bne.n	800060e <GPIO_PeriClkCtrl+0x146>
			GPIOF_PCLK_DIS();
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <GPIO_PeriClkCtrl+0x180>)
 8000602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000604:	4a10      	ldr	r2, [pc, #64]	; (8000648 <GPIO_PeriClkCtrl+0x180>)
 8000606:	f023 0320 	bic.w	r3, r3, #32
 800060a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800060c:	e014      	b.n	8000638 <GPIO_PeriClkCtrl+0x170>
		else if(pGPIOxr == GPIOG){
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4a13      	ldr	r2, [pc, #76]	; (8000660 <GPIO_PeriClkCtrl+0x198>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d106      	bne.n	8000624 <GPIO_PeriClkCtrl+0x15c>
			GPIOG_PCLK_DIS();
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <GPIO_PeriClkCtrl+0x180>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <GPIO_PeriClkCtrl+0x180>)
 800061c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000622:	e009      	b.n	8000638 <GPIO_PeriClkCtrl+0x170>
		else if(pGPIOxr == GPIOH){
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4a0f      	ldr	r2, [pc, #60]	; (8000664 <GPIO_PeriClkCtrl+0x19c>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d105      	bne.n	8000638 <GPIO_PeriClkCtrl+0x170>
			GPIOH_PCLK_DIS();
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <GPIO_PeriClkCtrl+0x180>)
 800062e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000630:	4a05      	ldr	r2, [pc, #20]	; (8000648 <GPIO_PeriClkCtrl+0x180>)
 8000632:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000636:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	40020000 	.word	0x40020000
 8000648:	40023800 	.word	0x40023800
 800064c:	40020400 	.word	0x40020400
 8000650:	40020800 	.word	0x40020800
 8000654:	40020c00 	.word	0x40020c00
 8000658:	40021000 	.word	0x40021000
 800065c:	40021400 	.word	0x40021400
 8000660:	40021800 	.word	0x40021800
 8000664:	40021c00 	.word	0x40021c00

08000668 <GPIO_Init>:
/*
 * Init and De-Init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; //temp. register
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
	//enable the peripheral clock
	GPIO_PeriClkCtrl(pGPIOHandle->pGPIOxr, ENABLE);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2101      	movs	r1, #1
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff ff24 	bl	80004c8 <GPIO_PeriClkCtrl>
	//1.Config the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	795b      	ldrb	r3, [r3, #5]
 8000684:	2b03      	cmp	r3, #3
 8000686:	d81f      	bhi.n	80006c8 <GPIO_Init+0x60>
		//non-interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	795b      	ldrb	r3, [r3, #5]
 800068c:	461a      	mov	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	791b      	ldrb	r3, [r3, #4]
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	fa02 f303 	lsl.w	r3, r2, r3
 8000698:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOxr->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	791b      	ldrb	r3, [r3, #4]
 80006a4:	4619      	mov	r1, r3
 80006a6:	2303      	movs	r3, #3
 80006a8:	408b      	lsls	r3, r1
 80006aa:	43db      	mvns	r3, r3
 80006ac:	4619      	mov	r1, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	400a      	ands	r2, r1
 80006b4:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOxr->MODER |= temp;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	6819      	ldr	r1, [r3, #0]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	697a      	ldr	r2, [r7, #20]
 80006c2:	430a      	orrs	r2, r1
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	e0bf      	b.n	8000848 <GPIO_Init+0x1e0>
	}
	else{
		//interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	795b      	ldrb	r3, [r3, #5]
 80006cc:	2b04      	cmp	r3, #4
 80006ce:	d117      	bne.n	8000700 <GPIO_Init+0x98>
			//Configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006d0:	4b47      	ldr	r3, [pc, #284]	; (80007f0 <GPIO_Init+0x188>)
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	7912      	ldrb	r2, [r2, #4]
 80006d8:	4611      	mov	r1, r2
 80006da:	2201      	movs	r2, #1
 80006dc:	408a      	lsls	r2, r1
 80006de:	4611      	mov	r1, r2
 80006e0:	4a43      	ldr	r2, [pc, #268]	; (80007f0 <GPIO_Init+0x188>)
 80006e2:	430b      	orrs	r3, r1
 80006e4:	60d3      	str	r3, [r2, #12]
			//clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006e6:	4b42      	ldr	r3, [pc, #264]	; (80007f0 <GPIO_Init+0x188>)
 80006e8:	689b      	ldr	r3, [r3, #8]
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	7912      	ldrb	r2, [r2, #4]
 80006ee:	4611      	mov	r1, r2
 80006f0:	2201      	movs	r2, #1
 80006f2:	408a      	lsls	r2, r1
 80006f4:	43d2      	mvns	r2, r2
 80006f6:	4611      	mov	r1, r2
 80006f8:	4a3d      	ldr	r2, [pc, #244]	; (80007f0 <GPIO_Init+0x188>)
 80006fa:	400b      	ands	r3, r1
 80006fc:	6093      	str	r3, [r2, #8]
 80006fe:	e035      	b.n	800076c <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	795b      	ldrb	r3, [r3, #5]
 8000704:	2b05      	cmp	r3, #5
 8000706:	d117      	bne.n	8000738 <GPIO_Init+0xd0>
			//Configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000708:	4b39      	ldr	r3, [pc, #228]	; (80007f0 <GPIO_Init+0x188>)
 800070a:	689b      	ldr	r3, [r3, #8]
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	7912      	ldrb	r2, [r2, #4]
 8000710:	4611      	mov	r1, r2
 8000712:	2201      	movs	r2, #1
 8000714:	408a      	lsls	r2, r1
 8000716:	4611      	mov	r1, r2
 8000718:	4a35      	ldr	r2, [pc, #212]	; (80007f0 <GPIO_Init+0x188>)
 800071a:	430b      	orrs	r3, r1
 800071c:	6093      	str	r3, [r2, #8]
			//clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800071e:	4b34      	ldr	r3, [pc, #208]	; (80007f0 <GPIO_Init+0x188>)
 8000720:	68db      	ldr	r3, [r3, #12]
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	7912      	ldrb	r2, [r2, #4]
 8000726:	4611      	mov	r1, r2
 8000728:	2201      	movs	r2, #1
 800072a:	408a      	lsls	r2, r1
 800072c:	43d2      	mvns	r2, r2
 800072e:	4611      	mov	r1, r2
 8000730:	4a2f      	ldr	r2, [pc, #188]	; (80007f0 <GPIO_Init+0x188>)
 8000732:	400b      	ands	r3, r1
 8000734:	60d3      	str	r3, [r2, #12]
 8000736:	e019      	b.n	800076c <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	795b      	ldrb	r3, [r3, #5]
 800073c:	2b06      	cmp	r3, #6
 800073e:	d115      	bne.n	800076c <GPIO_Init+0x104>
			//Configure the RTSR & FTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000740:	4b2b      	ldr	r3, [pc, #172]	; (80007f0 <GPIO_Init+0x188>)
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	7912      	ldrb	r2, [r2, #4]
 8000748:	4611      	mov	r1, r2
 800074a:	2201      	movs	r2, #1
 800074c:	408a      	lsls	r2, r1
 800074e:	4611      	mov	r1, r2
 8000750:	4a27      	ldr	r2, [pc, #156]	; (80007f0 <GPIO_Init+0x188>)
 8000752:	430b      	orrs	r3, r1
 8000754:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000756:	4b26      	ldr	r3, [pc, #152]	; (80007f0 <GPIO_Init+0x188>)
 8000758:	68db      	ldr	r3, [r3, #12]
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	7912      	ldrb	r2, [r2, #4]
 800075e:	4611      	mov	r1, r2
 8000760:	2201      	movs	r2, #1
 8000762:	408a      	lsls	r2, r1
 8000764:	4611      	mov	r1, r2
 8000766:	4a22      	ldr	r2, [pc, #136]	; (80007f0 <GPIO_Init+0x188>)
 8000768:	430b      	orrs	r3, r1
 800076a:	60d3      	str	r3, [r2, #12]
		}
		//Configure the GPIO port selection in SYSCFG_EXTICR

		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	791b      	ldrb	r3, [r3, #4]
 8000770:	089b      	lsrs	r3, r3, #2
 8000772:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	791b      	ldrb	r3, [r3, #4]
 8000778:	f003 0303 	and.w	r3, r3, #3
 800077c:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode  = GPIO_BASE_TO_MACRO(pGPIOHandle->pGPIOxr);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a1c      	ldr	r2, [pc, #112]	; (80007f4 <GPIO_Init+0x18c>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d045      	beq.n	8000814 <GPIO_Init+0x1ac>
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a1a      	ldr	r2, [pc, #104]	; (80007f8 <GPIO_Init+0x190>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d02b      	beq.n	80007ea <GPIO_Init+0x182>
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a19      	ldr	r2, [pc, #100]	; (80007fc <GPIO_Init+0x194>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d024      	beq.n	80007e6 <GPIO_Init+0x17e>
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a17      	ldr	r2, [pc, #92]	; (8000800 <GPIO_Init+0x198>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d01d      	beq.n	80007e2 <GPIO_Init+0x17a>
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a16      	ldr	r2, [pc, #88]	; (8000804 <GPIO_Init+0x19c>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d016      	beq.n	80007de <GPIO_Init+0x176>
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a14      	ldr	r2, [pc, #80]	; (8000808 <GPIO_Init+0x1a0>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d00f      	beq.n	80007da <GPIO_Init+0x172>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a13      	ldr	r2, [pc, #76]	; (800080c <GPIO_Init+0x1a4>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d008      	beq.n	80007d6 <GPIO_Init+0x16e>
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a11      	ldr	r2, [pc, #68]	; (8000810 <GPIO_Init+0x1a8>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d101      	bne.n	80007d2 <GPIO_Init+0x16a>
 80007ce:	2307      	movs	r3, #7
 80007d0:	e021      	b.n	8000816 <GPIO_Init+0x1ae>
 80007d2:	2300      	movs	r3, #0
 80007d4:	e01f      	b.n	8000816 <GPIO_Init+0x1ae>
 80007d6:	2306      	movs	r3, #6
 80007d8:	e01d      	b.n	8000816 <GPIO_Init+0x1ae>
 80007da:	2305      	movs	r3, #5
 80007dc:	e01b      	b.n	8000816 <GPIO_Init+0x1ae>
 80007de:	2304      	movs	r3, #4
 80007e0:	e019      	b.n	8000816 <GPIO_Init+0x1ae>
 80007e2:	2303      	movs	r3, #3
 80007e4:	e017      	b.n	8000816 <GPIO_Init+0x1ae>
 80007e6:	2302      	movs	r3, #2
 80007e8:	e015      	b.n	8000816 <GPIO_Init+0x1ae>
 80007ea:	2301      	movs	r3, #1
 80007ec:	e013      	b.n	8000816 <GPIO_Init+0x1ae>
 80007ee:	bf00      	nop
 80007f0:	40013c00 	.word	0x40013c00
 80007f4:	40020000 	.word	0x40020000
 80007f8:	40020400 	.word	0x40020400
 80007fc:	40020800 	.word	0x40020800
 8000800:	40020c00 	.word	0x40020c00
 8000804:	40021000 	.word	0x40021000
 8000808:	40021400 	.word	0x40021400
 800080c:	40021800 	.word	0x40021800
 8000810:	40021c00 	.word	0x40021c00
 8000814:	2300      	movs	r3, #0
 8000816:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000818:	4b5a      	ldr	r3, [pc, #360]	; (8000984 <GPIO_Init+0x31c>)
 800081a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081c:	4a59      	ldr	r2, [pc, #356]	; (8000984 <GPIO_Init+0x31c>)
 800081e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000822:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000824:	7c7a      	ldrb	r2, [r7, #17]
 8000826:	7cbb      	ldrb	r3, [r7, #18]
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	fa02 f103 	lsl.w	r1, r2, r3
 800082e:	4a56      	ldr	r2, [pc, #344]	; (8000988 <GPIO_Init+0x320>)
 8000830:	7cfb      	ldrb	r3, [r7, #19]
 8000832:	3302      	adds	r3, #2
 8000834:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		//Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000838:	4b54      	ldr	r3, [pc, #336]	; (800098c <GPIO_Init+0x324>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	7912      	ldrb	r2, [r2, #4]
 8000840:	4611      	mov	r1, r2
 8000842:	4a52      	ldr	r2, [pc, #328]	; (800098c <GPIO_Init+0x324>)
 8000844:	430b      	orrs	r3, r1
 8000846:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
	//2.Config the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	799b      	ldrb	r3, [r3, #6]
 8000850:	461a      	mov	r2, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	791b      	ldrb	r3, [r3, #4]
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	fa02 f303 	lsl.w	r3, r2, r3
 800085c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOxr->OSPEEDER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	689a      	ldr	r2, [r3, #8]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	791b      	ldrb	r3, [r3, #4]
 8000868:	4619      	mov	r1, r3
 800086a:	2303      	movs	r3, #3
 800086c:	408b      	lsls	r3, r1
 800086e:	43db      	mvns	r3, r3
 8000870:	4619      	mov	r1, r3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	400a      	ands	r2, r1
 8000878:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOxr->OSPEEDER |= temp;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	6899      	ldr	r1, [r3, #8]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	697a      	ldr	r2, [r7, #20]
 8000886:	430a      	orrs	r2, r1
 8000888:	609a      	str	r2, [r3, #8]
	temp = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
	//3.Config the pu-pd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	79db      	ldrb	r3, [r3, #7]
 8000892:	461a      	mov	r2, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	791b      	ldrb	r3, [r3, #4]
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOxr->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	68da      	ldr	r2, [r3, #12]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	791b      	ldrb	r3, [r3, #4]
 80008aa:	4619      	mov	r1, r3
 80008ac:	2303      	movs	r3, #3
 80008ae:	408b      	lsls	r3, r1
 80008b0:	43db      	mvns	r3, r3
 80008b2:	4619      	mov	r1, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	400a      	ands	r2, r1
 80008ba:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOxr->PUPDR |= temp;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	68d9      	ldr	r1, [r3, #12]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	697a      	ldr	r2, [r7, #20]
 80008c8:	430a      	orrs	r2, r1
 80008ca:	60da      	str	r2, [r3, #12]
	temp = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
	//4.Config the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	7a1b      	ldrb	r3, [r3, #8]
 80008d4:	461a      	mov	r2, r3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	791b      	ldrb	r3, [r3, #4]
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOxr->OTYPER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	685a      	ldr	r2, [r3, #4]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	791b      	ldrb	r3, [r3, #4]
 80008ea:	4619      	mov	r1, r3
 80008ec:	2303      	movs	r3, #3
 80008ee:	408b      	lsls	r3, r1
 80008f0:	43db      	mvns	r3, r3
 80008f2:	4619      	mov	r1, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	400a      	ands	r2, r1
 80008fa:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOxr->OTYPER |= temp;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	6859      	ldr	r1, [r3, #4]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	697a      	ldr	r2, [r7, #20]
 8000908:	430a      	orrs	r2, r1
 800090a:	605a      	str	r2, [r3, #4]

	//5.Config the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	795b      	ldrb	r3, [r3, #5]
 8000910:	2b02      	cmp	r3, #2
 8000912:	d132      	bne.n	800097a <GPIO_Init+0x312>
		//configure the alternate function registers
		uint32_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	791b      	ldrb	r3, [r3, #4]
 8000918:	08db      	lsrs	r3, r3, #3
 800091a:	b2db      	uxtb	r3, r3
 800091c:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	791b      	ldrb	r3, [r3, #4]
 8000922:	f003 0307 	and.w	r3, r3, #7
 8000926:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOxr->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	68fa      	ldr	r2, [r7, #12]
 800092e:	3208      	adds	r2, #8
 8000930:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	210f      	movs	r1, #15
 800093a:	fa01 f303 	lsl.w	r3, r1, r3
 800093e:	43db      	mvns	r3, r3
 8000940:	4619      	mov	r1, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4011      	ands	r1, r2
 8000948:	68fa      	ldr	r2, [r7, #12]
 800094a:	3208      	adds	r2, #8
 800094c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOxr->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	68fa      	ldr	r2, [r7, #12]
 8000956:	3208      	adds	r2, #8
 8000958:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	7a5b      	ldrb	r3, [r3, #9]
 8000960:	4619      	mov	r1, r3
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	fa01 f303 	lsl.w	r3, r1, r3
 800096a:	4619      	mov	r1, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4311      	orrs	r1, r2
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	3208      	adds	r2, #8
 8000976:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800097a:	bf00      	nop
 800097c:	3718      	adds	r7, #24
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800
 8000988:	40013800 	.word	0x40013800
 800098c:	40013c00 	.word	0x40013c00

08000990 <GPIO_ReadFromInPin>:
 *
 * @return					- 0 or 1
 *
 * @Note                    - none
 */
uint8_t GPIO_ReadFromInPin(GPIO_RegDef_t *pGPIOxr, uint8_t PinNumber){
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	460b      	mov	r3, r1
 800099a:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (pGPIOxr->IDR >> PinNumber) & 0x00000001;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	691a      	ldr	r2, [r3, #16]
 80009a0:	78fb      	ldrb	r3, [r7, #3]
 80009a2:	fa22 f303 	lsr.w	r3, r2, r3
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	f003 0301 	and.w	r3, r3, #1
 80009ac:	73fb      	strb	r3, [r7, #15]
	return value;
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <SPI_PeriClkCtrl>:
 *
 * @return					- none
 *
 * @Note                    - none
 */
void SPI_PeriClkCtrl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	460b      	mov	r3, r1
 80009c6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80009c8:	78fb      	ldrb	r3, [r7, #3]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d12b      	bne.n	8000a26 <SPI_PeriClkCtrl+0x6a>
		if(pSPIx == SPI1){
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a2d      	ldr	r2, [pc, #180]	; (8000a88 <SPI_PeriClkCtrl+0xcc>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d106      	bne.n	80009e4 <SPI_PeriClkCtrl+0x28>
			SPI1_PCLK_EN();
 80009d6:	4b2d      	ldr	r3, [pc, #180]	; (8000a8c <SPI_PeriClkCtrl+0xd0>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009da:	4a2c      	ldr	r2, [pc, #176]	; (8000a8c <SPI_PeriClkCtrl+0xd0>)
 80009dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009e0:	6453      	str	r3, [r2, #68]	; 0x44
		}
		else if(pSPIx == SPI4){
			SPI4_PCLK_DIS();
		}
	}
}
 80009e2:	e04b      	b.n	8000a7c <SPI_PeriClkCtrl+0xc0>
		else if(pSPIx == SPI2){
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a2a      	ldr	r2, [pc, #168]	; (8000a90 <SPI_PeriClkCtrl+0xd4>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d106      	bne.n	80009fa <SPI_PeriClkCtrl+0x3e>
			SPI2_PCLK_EN();
 80009ec:	4b27      	ldr	r3, [pc, #156]	; (8000a8c <SPI_PeriClkCtrl+0xd0>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	4a26      	ldr	r2, [pc, #152]	; (8000a8c <SPI_PeriClkCtrl+0xd0>)
 80009f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009f8:	e040      	b.n	8000a7c <SPI_PeriClkCtrl+0xc0>
		else if(pSPIx == SPI3){
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a25      	ldr	r2, [pc, #148]	; (8000a94 <SPI_PeriClkCtrl+0xd8>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d106      	bne.n	8000a10 <SPI_PeriClkCtrl+0x54>
			SPI3_PCLK_EN();
 8000a02:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <SPI_PeriClkCtrl+0xd0>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	4a21      	ldr	r2, [pc, #132]	; (8000a8c <SPI_PeriClkCtrl+0xd0>)
 8000a08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a0c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a0e:	e035      	b.n	8000a7c <SPI_PeriClkCtrl+0xc0>
		else if(pSPIx == SPI4){
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a21      	ldr	r2, [pc, #132]	; (8000a98 <SPI_PeriClkCtrl+0xdc>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d131      	bne.n	8000a7c <SPI_PeriClkCtrl+0xc0>
			SPI4_PCLK_EN();
 8000a18:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <SPI_PeriClkCtrl+0xd0>)
 8000a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1c:	4a1b      	ldr	r2, [pc, #108]	; (8000a8c <SPI_PeriClkCtrl+0xd0>)
 8000a1e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a22:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000a24:	e02a      	b.n	8000a7c <SPI_PeriClkCtrl+0xc0>
		if(pSPIx == SPI1){
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a17      	ldr	r2, [pc, #92]	; (8000a88 <SPI_PeriClkCtrl+0xcc>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d106      	bne.n	8000a3c <SPI_PeriClkCtrl+0x80>
			SPI1_PCLK_DIS();
 8000a2e:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <SPI_PeriClkCtrl+0xd0>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	4a16      	ldr	r2, [pc, #88]	; (8000a8c <SPI_PeriClkCtrl+0xd0>)
 8000a34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a38:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000a3a:	e01f      	b.n	8000a7c <SPI_PeriClkCtrl+0xc0>
		else if(pSPIx == SPI2){
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4a14      	ldr	r2, [pc, #80]	; (8000a90 <SPI_PeriClkCtrl+0xd4>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d106      	bne.n	8000a52 <SPI_PeriClkCtrl+0x96>
			SPI2_PCLK_DIS();
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <SPI_PeriClkCtrl+0xd0>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	4a10      	ldr	r2, [pc, #64]	; (8000a8c <SPI_PeriClkCtrl+0xd0>)
 8000a4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000a4e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a50:	e014      	b.n	8000a7c <SPI_PeriClkCtrl+0xc0>
		else if(pSPIx == SPI3){
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a0f      	ldr	r2, [pc, #60]	; (8000a94 <SPI_PeriClkCtrl+0xd8>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d106      	bne.n	8000a68 <SPI_PeriClkCtrl+0xac>
			SPI3_PCLK_DIS();
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <SPI_PeriClkCtrl+0xd0>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	4a0b      	ldr	r2, [pc, #44]	; (8000a8c <SPI_PeriClkCtrl+0xd0>)
 8000a60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a64:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a66:	e009      	b.n	8000a7c <SPI_PeriClkCtrl+0xc0>
		else if(pSPIx == SPI4){
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <SPI_PeriClkCtrl+0xdc>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d105      	bne.n	8000a7c <SPI_PeriClkCtrl+0xc0>
			SPI4_PCLK_DIS();
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <SPI_PeriClkCtrl+0xd0>)
 8000a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a74:	4a05      	ldr	r2, [pc, #20]	; (8000a8c <SPI_PeriClkCtrl+0xd0>)
 8000a76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a7a:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	40013000 	.word	0x40013000
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40003800 	.word	0x40003800
 8000a94:	40003c00 	.word	0x40003c00
 8000a98:	40013400 	.word	0x40013400

08000a9c <SPI_getFlagStatus>:
uint8_t SPI_getFlagStatus(SPI_RegDef_t *pSPIx, uint32_t flagName){
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & flagName){
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	689a      	ldr	r2, [r3, #8]
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	4013      	ands	r3, r2
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <SPI_getFlagStatus+0x1a>
		return FLAG_SET;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e000      	b.n	8000ab8 <SPI_getFlagStatus+0x1c>
	}
	else{
	return FLAG_RESET;
 8000ab6:	2300      	movs	r3, #0
	}
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <SPI_Init>:
 *
 * @return					- none
 *
 * @Note                    - none
 */
void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
	//peripheral clock enable
	SPI_PeriClkCtrl(pSPIHandle->pSPIx, ENABLE);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff ff70 	bl	80009bc <SPI_PeriClkCtrl>

	//configure device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	791b      	ldrb	r3, [r3, #4]
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	60fb      	str	r3, [r7, #12]
	//configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	795b      	ldrb	r3, [r3, #5]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d104      	bne.n	8000afc <SPI_Init+0x38>
		//for this mode "bidi"mode should be CLEAR
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	e014      	b.n	8000b26 <SPI_Init+0x62>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	795b      	ldrb	r3, [r3, #5]
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d104      	bne.n	8000b0e <SPI_Init+0x4a>
		//for this mode "bidi"mode should be SET
		tempreg |= (1 << SPI_CR1_BIDIMODE);
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	e00b      	b.n	8000b26 <SPI_Init+0x62>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	795b      	ldrb	r3, [r3, #5]
 8000b12:	2b03      	cmp	r3, #3
 8000b14:	d107      	bne.n	8000b26 <SPI_Init+0x62>
		//for this mode "bidi"mode should be CLEAR
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000b1c:	60fb      	str	r3, [r7, #12]
		//RXONLY must be SET
		tempreg |= (1 << SPI_CR1_RXONLY);
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b24:	60fb      	str	r3, [r7, #12]
	}
	//configure spi serial clk speed
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed <<SPI_CR1_BR;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	799b      	ldrb	r3, [r3, #6]
 8000b2a:	00db      	lsls	r3, r3, #3
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	60fb      	str	r3, [r7, #12]
	//configure the DD
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF <<SPI_CR1_DFF;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	79db      	ldrb	r3, [r3, #7]
 8000b38:	02db      	lsls	r3, r3, #11
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	60fb      	str	r3, [r7, #12]
	//configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL <<SPI_CR1_CPOL;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	7a1b      	ldrb	r3, [r3, #8]
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	461a      	mov	r2, r3
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	60fb      	str	r3, [r7, #12]
	//configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA <<SPI_CR1_CPHA;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	7a5b      	ldrb	r3, [r3, #9]
 8000b54:	461a      	mov	r2, r3
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	60fb      	str	r3, [r7, #12]
	//configure the SSM
	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	7a9b      	ldrb	r3, [r3, #10]
 8000b60:	025b      	lsls	r3, r3, #9
 8000b62:	461a      	mov	r2, r3
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 |= tempreg;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	6819      	ldr	r1, [r3, #0]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	68fa      	ldr	r2, [r7, #12]
 8000b76:	430a      	orrs	r2, r1
 8000b78:	601a      	str	r2, [r3, #0]
}
 8000b7a:	bf00      	nop
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <SPI_SendData>:
 *
 * @return					- none
 *
 * @Note                    - This is blocking call
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len){
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b084      	sub	sp, #16
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	60f8      	str	r0, [r7, #12]
 8000b8a:	60b9      	str	r1, [r7, #8]
 8000b8c:	607a      	str	r2, [r7, #4]
	while(Len > 0){
 8000b8e:	e027      	b.n	8000be0 <SPI_SendData+0x5e>
		//wait until TXE is set
		while(SPI_getFlagStatus(pSPIx,SPI_TXE_FLAG) == FLAG_RESET);
 8000b90:	bf00      	nop
 8000b92:	2102      	movs	r1, #2
 8000b94:	68f8      	ldr	r0, [r7, #12]
 8000b96:	f7ff ff81 	bl	8000a9c <SPI_getFlagStatus>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d0f8      	beq.n	8000b92 <SPI_SendData+0x10>
		//check the DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF) ){
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d00e      	beq.n	8000bca <SPI_SendData+0x48>
			//16 BIT DFF
			//loading data in CR1
			pSPIx->DR = *((uint16_t*) pTxBuffer);
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	60da      	str	r2, [r3, #12]
			Len --;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	607b      	str	r3, [r7, #4]
			Len --;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	e00a      	b.n	8000be0 <SPI_SendData+0x5e>
		}
		else{
			//8 BIT DFF
			pSPIx->DR = *pTxBuffer;
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	461a      	mov	r2, r3
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	60da      	str	r2, [r3, #12]
			Len --;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	60bb      	str	r3, [r7, #8]
	while(Len > 0){
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d1d4      	bne.n	8000b90 <SPI_SendData+0xe>
		}
	}
}
 8000be6:	bf00      	nop
 8000be8:	bf00      	nop
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <SPI_ReceiveData>:
 *
 * @return					- none
 *
 * @Note                    - none
 */
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len){
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
	while(Len > 0){
 8000bfc:	e027      	b.n	8000c4e <SPI_ReceiveData+0x5e>
		//wait until RXNE is set
		while(SPI_getFlagStatus(pSPIx,SPI_RXNE_FLAG) == FLAG_RESET);
 8000bfe:	bf00      	nop
 8000c00:	2101      	movs	r1, #1
 8000c02:	68f8      	ldr	r0, [r7, #12]
 8000c04:	f7ff ff4a 	bl	8000a9c <SPI_getFlagStatus>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d0f8      	beq.n	8000c00 <SPI_ReceiveData+0x10>
		//check the DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF) ){
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d00e      	beq.n	8000c38 <SPI_ReceiveData+0x48>
			//16 BIT DFF
			//loading the data from
			*((uint16_t*) pRxBuffer) = pSPIx->DR;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	801a      	strh	r2, [r3, #0]
			Len --;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	607b      	str	r3, [r7, #4]
			Len --;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	607b      	str	r3, [r7, #4]
			(uint16_t*)pRxBuffer++;
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	3301      	adds	r3, #1
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	e00a      	b.n	8000c4e <SPI_ReceiveData+0x5e>
		}
		else{
			//8 BIT DFF
			*(pRxBuffer) =pSPIx->DR;
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	701a      	strb	r2, [r3, #0]
			Len --;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	3b01      	subs	r3, #1
 8000c46:	607b      	str	r3, [r7, #4]
			pRxBuffer++;
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	60bb      	str	r3, [r7, #8]
	while(Len > 0){
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d1d4      	bne.n	8000bfe <SPI_ReceiveData+0xe>
		}
	}
}
 8000c54:	bf00      	nop
 8000c56:	bf00      	nop
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <SPI_PeripheralControl>:
void SPI_IRQHandling(SPI_Handle_t *pHandle){

}


void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000c5e:	b480      	push	{r7}
 8000c60:	b083      	sub	sp, #12
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
 8000c66:	460b      	mov	r3, r1
 8000c68:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000c6a:	78fb      	ldrb	r3, [r7, #3]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d106      	bne.n	8000c7e <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	601a      	str	r2, [r3, #0]
	}
	else{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000c7c:	e005      	b.n	8000c8a <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	601a      	str	r2, [r3, #0]
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <SPI_SSOEConfig>:
	else{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
	}
}

void SPI_SSOEConfig(SPI_RegDef_t *pSPIx,uint8_t EnorDi){
 8000c96:	b480      	push	{r7}
 8000c98:	b083      	sub	sp, #12
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000ca2:	78fb      	ldrb	r3, [r7, #3]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d106      	bne.n	8000cb6 <SPI_SSOEConfig+0x20>
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f043 0204 	orr.w	r2, r3, #4
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	605a      	str	r2, [r3, #4]
	}
	else{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000cb4:	e005      	b.n	8000cc2 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f023 0204 	bic.w	r2, r3, #4
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	605a      	str	r2, [r3, #4]
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <__libc_init_array>:
 8000cd0:	b570      	push	{r4, r5, r6, lr}
 8000cd2:	4d0d      	ldr	r5, [pc, #52]	; (8000d08 <__libc_init_array+0x38>)
 8000cd4:	4c0d      	ldr	r4, [pc, #52]	; (8000d0c <__libc_init_array+0x3c>)
 8000cd6:	1b64      	subs	r4, r4, r5
 8000cd8:	10a4      	asrs	r4, r4, #2
 8000cda:	2600      	movs	r6, #0
 8000cdc:	42a6      	cmp	r6, r4
 8000cde:	d109      	bne.n	8000cf4 <__libc_init_array+0x24>
 8000ce0:	4d0b      	ldr	r5, [pc, #44]	; (8000d10 <__libc_init_array+0x40>)
 8000ce2:	4c0c      	ldr	r4, [pc, #48]	; (8000d14 <__libc_init_array+0x44>)
 8000ce4:	f000 f818 	bl	8000d18 <_init>
 8000ce8:	1b64      	subs	r4, r4, r5
 8000cea:	10a4      	asrs	r4, r4, #2
 8000cec:	2600      	movs	r6, #0
 8000cee:	42a6      	cmp	r6, r4
 8000cf0:	d105      	bne.n	8000cfe <__libc_init_array+0x2e>
 8000cf2:	bd70      	pop	{r4, r5, r6, pc}
 8000cf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cf8:	4798      	blx	r3
 8000cfa:	3601      	adds	r6, #1
 8000cfc:	e7ee      	b.n	8000cdc <__libc_init_array+0xc>
 8000cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d02:	4798      	blx	r3
 8000d04:	3601      	adds	r6, #1
 8000d06:	e7f2      	b.n	8000cee <__libc_init_array+0x1e>
 8000d08:	08000d30 	.word	0x08000d30
 8000d0c:	08000d30 	.word	0x08000d30
 8000d10:	08000d30 	.word	0x08000d30
 8000d14:	08000d34 	.word	0x08000d34

08000d18 <_init>:
 8000d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d1a:	bf00      	nop
 8000d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d1e:	bc08      	pop	{r3}
 8000d20:	469e      	mov	lr, r3
 8000d22:	4770      	bx	lr

08000d24 <_fini>:
 8000d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d26:	bf00      	nop
 8000d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d2a:	bc08      	pop	{r3}
 8000d2c:	469e      	mov	lr, r3
 8000d2e:	4770      	bx	lr
